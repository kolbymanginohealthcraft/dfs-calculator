import React from "react";
import { formatDOB } from "../utils/calculations";
import { covariateRelatedItems } from "../utils/covariateRelatedItems";
import "./ExportView.css";

const ExportView = ({ patient, scores, covariates }) => {
  const today = new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  const grouped = {};
  covariates.forEach(({ name, value, multiplier }) => {
    const group = covariateRelatedItems[name]?.group || "Other";
    if (!grouped[group]) grouped[group] = [];
    grouped[group].push({ name, value, multiplier });
  });

  const groupOrder = (a, b) => {
    if (a === "Baseline") return -1;
    if (b === "Baseline") return 1;
    return a.localeCompare(b);
  };

  const format = (n) => (n !== undefined ? Number(n).toFixed(2) : "â€”");

  const grandTotal = covariates.reduce(
    (sum, { value, multiplier }) => sum + value * (multiplier ?? 0),
    0
  );

  return (
    <div className="exportContainer">
      <h1 className="reportTitle">Discharge Function Score Report</h1>

      <section className="section">
        <p className="patientLine">
          <span className="label">Patient:</span> {patient.name}
          {(patient.dob || patient.age || patient.ard) && (
            <span>
              {" "}
              (age: {patient.age}, DOB {formatDOB(patient.dob)}, ARD{" "}
              {formatDOB(patient.ard)})
            </span>
          )}
        </p>

        <p className="facilityLine">
          <span className="label">Facility:</span> {patient.facility}
        </p>
      </section>

      <section className="section">
        <h3 className="sectionSubheading">ðŸ“‹ Summary</h3>
        <div className="summaryLine">
          <span className="summaryLabel">Start Score:</span>{" "}
          <span className="summaryValue">{scores.start ?? "â€”"}</span>
          <span className="summaryDivider">|</span>
          <span className="summaryLabel">Expected Score:</span>{" "}
          <span className="summaryValue">
            {scores.expected !== undefined
              ? Number(scores.expected).toFixed(2)
              : "â€”"}
          </span>
          <span className="summaryDivider">|</span>
          <span className="summaryLabel">Modeled Score:</span>{" "}
          <span className="summaryValue">
            {scores.modeled !== undefined
              ? Number(scores.modeled).toFixed(2)
              : "â€”"}
          </span>
        </div>
      </section>

      <section className="section">
        <h3 className="sectionSubheading">ðŸ“Š Contributing Covariates</h3>
        <table className="covariateTable">
          <thead>
            <tr>
              <th>Covariate</th>
              <th>Value</th>
              <th>Multiplier</th>
              <th>Contribution</th>
            </tr>
          </thead>

          {Object.entries(grouped)
            .sort(([a], [b]) => groupOrder(a, b))
            .map(([group, items]) => (
              <tbody key={group}>
                <tr className="groupRow">
                  <td colSpan="4">{group}</td>
                </tr>
                {items.map(({ name, value, multiplier }) => (
                  <tr key={name}>
                    <td>{name}</td>
                    <td>{value}</td>
                    <td>{format(multiplier)}</td>
                    <td>{format(value * multiplier)}</td>
                  </tr>
                ))}
              </tbody>
            ))}

          <tfoot>
            <tr className="totalRow">
              <td colSpan="3" style={{ textAlign: "right", fontWeight: "bold" }}>
                Expected Discharge Function Score:
              </td>
              <td style={{ fontWeight: "bold" }}>{format(grandTotal)}</td>
            </tr>
          </tfoot>
        </table>
      </section>

      <p className="footerNote">
        Generated by DFS Calculator Â· Aegis Therapies Â· {today}
      </p>
    </div>
  );
};

export default ExportView;
